/* 
IDK (Paul Serbanescu, May Qiu, Jeffery Tang)
APCS
L06 -- Reviews
2022-02-13
time spent: 4 hrs
*/

Activity 1
1a) public static double sentimentVal( String word )
1b) It requires a String. If you do not put a String input, it will throw an
    error (incorrect type).
1c) It returns a double.

2)  sentimentVal("accidental") -> -2.07
    sentimentVal("account") -> 0.64
    sentimentVal("acceptable") -> -0.12

3a) It will compile because "warm" is a string and the parameter is a string.
3b) It will not compile because 0.5 is a double, not a string, so it does not
    parameter requirements.
3c) It will not compile because the parameter is one string, not two.

Activity 2
4)  In totalSentiment, I used textToString to convert a file into strings. I then
    turned these strings into an array using split. I then used a for loop to iterate
    through all the words and added their sentiment value into the final answer.
5a) Not really because negative sentiment should not impact postitive sentiment.
5b) It should negate the negative sentiments or the positive ones, so all sentiment
    are kept track of.
6)  The student has no if statement catching totalSentiments greater or equal to 15.
    The greatest totalSentiment this student would be able to catch is 14, which is
    the first if statement. Logically, the greater the totalSentiments, the greater
    the starRating, but anything totalSentiment greater than 14 would return 0 in
    this case, since these totalSentiment values are only caught by the last else
    statement.

Activity 3

3) Substring returns only a portion of the given String, within the start index and the end index.
   You have to add 1 because start index is inclusive, and you don't want to include (copy) the last letter
   of the previous part.
5) Static methods can be called inside the main method directly whereas nonstatic ones cannot. Nonstatic
   methods must be an instance of an object and relate only to that instance. In way static methods are "global."
6) Inside fakeReview, instead of calling randomAdjective(), we can call randomPositiveAdjective() or
   randomNegativeAdjective() depending on what kind of review we want to make.

Activity 4

1) If we want to decieve everyone and become villans
2) If we are good people and liked the food / want to boost our friend's pizza restaurant.
3) We would chose the words with the most extreme sentiment values. If we wanted a negative review, we
can restrict it to only adjectives with sentiment values less than -.5, and greater than .5 for positive reviews.
5) oneWord would consist of the original String from its first index to its last.
6) The * character would cause the adjective to not be recognized.
7) We can restrict the method to only allow adjectives from randomAdjective() with sentimental values above .5.

Activity 5
1) We decided to implement this program because it expanded on elements of previous activities.
2) We struggled with arrays a lot, but later realized that ArrayLists worked far better for our program.
3) public static ArrayList<String> restaurantRanker(String fileName)
    This method is static because we wanted it to be able to be used from the main method of the file, which can only deal with static methods / variables.
    We use a String parameter so we can use our Reviews.txt (or others if we make them) file to rank the best restaurants from them based on the positivity of the reviews.
4)  while (word.length() > 0 && !Character.isAlphabetic(word.charAt(0))) {
      word = word.substring(1);
    }
    while (word.length() > 0 && !Character.isAlphabetic(word.charAt(word.length() - 1))) {
      word = word.substring(0, word.length() - 1);
    }

    return temp.trim();

    the method removePunctuation removes punctuation
    the method textToString turns a txt file into a String

5)   for (String word : temp) {
        if (posAdj.indexOf(word) > -1) {
          value++;
        } else if (negAdj.indexOf(word) > -1) {
          value--;
        }
      }

      can also be written as:
      for (String word : temp) {
        if (negAdj.indexOf(word) > -1) {
          value++;
        } else if (posAdj.indexOf(word) > -1) {
          value--;
        }
      }
      (did u see the difference?!)

6)   for (int j = 0; j < temp.length; j++) {
        temp[j] = removePunctuation(temp[j]);
      }
      this loop loops through an array of words, removing the punctuation from each word in the array

      ArrayList<String> strippedWords = new ArrayList<>();
      for (String word : temp) {
          strippedWords.add(removePunctuation(word));
      }
      we chose not to do this because we didnt want to create a new array / ArrayList ^